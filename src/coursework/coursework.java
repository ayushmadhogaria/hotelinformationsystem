/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coursework;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek Raj Jaiswal
 * @author Ayush Madhogaria
 * @author Chirag Pokharel
 * @author Shabd Mishra
 * 
 */

public class coursework extends javax.swing.JFrame {

    /**
     * Creates new form cw2
     */
    public coursework() {
        initComponents();
        homePanel.setVisible(true);
        admin.setVisible(false);
        btn_back.setVisible(false);
        loginPanel.setVisible(false);
        date();
        time();
    }

    // Gets date from system
    public void date() {
        String txtdate = new SimpleDateFormat("dd/MM/yyyy", Locale.FRANCE).format(new Date());
        date.setText(txtdate);
    }

    // Gets time from system
    public void time() {
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("HH:mm:ss");
                String time1 = sdf.format(new Date());
                time.setText(time1);
            }
        }).start();
    }

    // Creates an arraylist
    ArrayList<String[]> SearchArray = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        group_pickDrop = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        admin = new javax.swing.JPanel();
        customerPanel = new javax.swing.JPanel();
        label_sort = new javax.swing.JLabel();
        combo_adminSort = new javax.swing.JComboBox<>();
        lable_search = new javax.swing.JLabel();
        label_searchPrice = new javax.swing.JLabel();
        btn_searchPrice = new javax.swing.JButton();
        combo_Rating = new javax.swing.JComboBox<>();
        btn_searchRating = new javax.swing.JButton();
        label_searchRating = new javax.swing.JLabel();
        txt_searchPrice = new javax.swing.JTextField();
        tablePanel = new javax.swing.JScrollPane();
        adminTable = new javax.swing.JTable();
        adminMain = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        label_login = new javax.swing.JLabel();
        txt_username = new javax.swing.JTextField();
        txt_password = new javax.swing.JTextField();
        btn_login = new javax.swing.JButton();
        adminPanel = new javax.swing.JPanel();
        btn_delete = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_add = new javax.swing.JButton();
        radio_unavailable = new javax.swing.JRadioButton();
        radio_available = new javax.swing.JRadioButton();
        label_pickDrop = new javax.swing.JLabel();
        label_contact = new javax.swing.JLabel();
        txt_contact = new javax.swing.JTextField();
        combo_addRating = new javax.swing.JComboBox<>();
        label_rating = new javax.swing.JLabel();
        label_price = new javax.swing.JLabel();
        txt_price = new javax.swing.JTextField();
        txt_address = new javax.swing.JTextField();
        label_address = new javax.swing.JLabel();
        label_hotelName = new javax.swing.JLabel();
        txt_hotelName = new javax.swing.JTextField();
        label_addHotel = new javax.swing.JLabel();
        btn_save = new javax.swing.JButton();
        customerMottoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        homePanel = new javax.swing.JPanel();
        btn_customer = new javax.swing.JButton();
        btn_admin = new javax.swing.JButton();
        txt_time = new javax.swing.JLabel();
        txt_date = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        txt_motto = new javax.swing.JLabel();
        label_namaste = new javax.swing.JLabel();
        btn_back = new javax.swing.JButton();
        label_title = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menuItem_import = new javax.swing.JMenuItem();
        menuItem_exit = new javax.swing.JMenuItem();
        menuItem_help = new javax.swing.JMenu();
        menu_userManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel Information System");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.lightGray);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setLayout(new java.awt.CardLayout());

        customerPanel.setBackground(new java.awt.Color(204, 204, 204));
        customerPanel.setForeground(new java.awt.Color(255, 255, 255));

        label_sort.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        label_sort.setText("Sort By:");

        combo_adminSort.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_adminSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select an Option-", "Ascending Hotel Name", "Desending Hotel Name" }));
        combo_adminSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_adminSortActionPerformed(evt);
            }
        });

        lable_search.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        lable_search.setText("Search according to your preference");

        label_searchPrice.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        label_searchPrice.setText("On basis of Price of Room per Night");

        btn_searchPrice.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_searchPrice.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btn_searchPrice.setText("Search");
        btn_searchPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchPriceActionPerformed(evt);
            }
        });

        combo_Rating.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_Rating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select a Rating-", "Unrated", "1 Star", "2 Star", "3 Star", "4 Star", "5 Star" }));

        btn_searchRating.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_searchRating.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btn_searchRating.setText("Search");
        btn_searchRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchRatingActionPerformed(evt);
            }
        });

        label_searchRating.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        label_searchRating.setText("On basis of Hotel Rating");

        txt_searchPrice.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txt_searchPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_searchPriceKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout customerPanelLayout = new javax.swing.GroupLayout(customerPanel);
        customerPanel.setLayout(customerPanelLayout);
        customerPanelLayout.setHorizontalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lable_search)
                    .addGroup(customerPanelLayout.createSequentialGroup()
                        .addComponent(label_sort)
                        .addGap(38, 38, 38)
                        .addComponent(combo_adminSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label_searchPrice)
                    .addComponent(label_searchRating)
                    .addGroup(customerPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(customerPanelLayout.createSequentialGroup()
                                .addComponent(combo_Rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(btn_searchRating))
                            .addGroup(customerPanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(txt_searchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_searchPrice)))))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        customerPanelLayout.setVerticalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_adminSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_sort))
                .addGap(29, 29, 29)
                .addComponent(lable_search)
                .addGap(23, 23, 23)
                .addComponent(label_searchPrice)
                .addGap(18, 18, 18)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_searchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_searchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(label_searchRating)
                .addGap(18, 18, 18)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_Rating, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_searchRating, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51))
        );

        adminTable.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        adminTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hotel Name", "Address", "Rating", "Price", "Contact Details", "Pickup and Drop Service"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        adminTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        adminTable.getTableHeader().setReorderingAllowed(false);
        adminTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminTableMouseClicked(evt);
            }
        });
        tablePanel.setViewportView(adminTable);
        if (adminTable.getColumnModel().getColumnCount() > 0) {
            adminTable.getColumnModel().getColumn(0).setResizable(false);
            adminTable.getColumnModel().getColumn(1).setResizable(false);
            adminTable.getColumnModel().getColumn(2).setResizable(false);
            adminTable.getColumnModel().getColumn(3).setResizable(false);
            adminTable.getColumnModel().getColumn(5).setResizable(false);
        }

        adminMain.setLayout(new java.awt.CardLayout());

        loginPanel.setBackground(new java.awt.Color(204, 204, 204));

        label_login.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        label_login.setText("Please Login to Continue:");

        txt_username.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_username.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_username.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Username", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        txt_password.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_password.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_password.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Password", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        btn_login.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_login.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/login1.png"))); // NOI18N
        btn_login.setText("Login");
        btn_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_username)
                    .addComponent(txt_password)
                    .addComponent(btn_login, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPanelLayout.createSequentialGroup()
                .addGap(0, 205, Short.MAX_VALUE)
                .addComponent(label_login)
                .addGap(183, 183, 183))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(label_login, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(txt_username, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btn_login, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        adminMain.add(loginPanel, "card3");

        adminPanel.setBackground(new java.awt.Color(204, 204, 204));

        btn_delete.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btn_delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_update.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btn_update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/update.png"))); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_add.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btn_add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add.png"))); // NOI18N
        btn_add.setText("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        group_pickDrop.add(radio_unavailable);
        radio_unavailable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        radio_unavailable.setText("Unavailable");
        radio_unavailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_unavailableActionPerformed(evt);
            }
        });

        group_pickDrop.add(radio_available);
        radio_available.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        radio_available.setText("Available");

        label_pickDrop.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_pickDrop.setText("Pickup and Drop Service");

        label_contact.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_contact.setText("Contact Details");

        txt_contact.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txt_contact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_contactActionPerformed(evt);
            }
        });
        txt_contact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_contactKeyPressed(evt);
            }
        });

        combo_addRating.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        combo_addRating.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select a Rating-", "Unrated", "1 Star", "2 Star", "3 Star", "4 Star", "5 Star" }));

        label_rating.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_rating.setText("Rating");

        label_price.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_price.setText("Price");

        txt_price.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txt_price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_priceKeyPressed(evt);
            }
        });

        txt_address.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        label_address.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_address.setText("Address");

        label_hotelName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        label_hotelName.setText("Hotel Name");

        txt_hotelName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        label_addHotel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        label_addHotel.setText("Add Hotels");

        btn_save.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btn_save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminPanelLayout = new javax.swing.GroupLayout(adminPanel);
        adminPanel.setLayout(adminPanelLayout);
        adminPanelLayout.setHorizontalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminPanelLayout.createSequentialGroup()
                        .addComponent(label_pickDrop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addComponent(radio_available)
                        .addGap(32, 32, 32)
                        .addComponent(radio_unavailable)
                        .addGap(91, 91, 91))
                    .addGroup(adminPanelLayout.createSequentialGroup()
                        .addComponent(btn_add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_update)
                        .addGap(26, 26, 26)
                        .addComponent(btn_delete)
                        .addGap(18, 18, 18)
                        .addComponent(btn_save)
                        .addGap(37, 37, 37))
                    .addGroup(adminPanelLayout.createSequentialGroup()
                        .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_hotelName)
                            .addComponent(label_address)
                            .addComponent(label_contact)
                            .addComponent(label_rating)
                            .addComponent(label_price))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_contact, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(164, 164, 164))))
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminPanelLayout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combo_addRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txt_hotelName, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_address, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txt_price, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(adminPanelLayout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(label_addHotel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        adminPanelLayout.setVerticalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(label_addHotel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_hotelName)
                    .addComponent(txt_hotelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_address)
                    .addComponent(txt_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_rating)
                    .addComponent(combo_addRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_price)
                    .addComponent(txt_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_contact))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_available)
                    .addComponent(radio_unavailable)
                    .addComponent(label_pickDrop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_delete)
                    .addComponent(btn_add)
                    .addComponent(btn_save)
                    .addComponent(btn_update))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        adminMain.add(adminPanel, "card2");

        customerMottoPanel.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Script MT Bold", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Whisper Your ");

        jLabel2.setFont(new java.awt.Font("Script MT Bold", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Destinations To Us.......");

        javax.swing.GroupLayout customerMottoPanelLayout = new javax.swing.GroupLayout(customerMottoPanel);
        customerMottoPanel.setLayout(customerMottoPanelLayout);
        customerMottoPanelLayout.setHorizontalGroup(
            customerMottoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerMottoPanelLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerMottoPanelLayout.createSequentialGroup()
                .addContainerGap(155, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(73, 73, 73))
        );
        customerMottoPanelLayout.setVerticalGroup(
            customerMottoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerMottoPanelLayout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        adminMain.add(customerMottoPanel, "card4");

        javax.swing.GroupLayout adminLayout = new javax.swing.GroupLayout(admin);
        admin.setLayout(adminLayout);
        adminLayout.setHorizontalGroup(
            adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1062, Short.MAX_VALUE)
                    .addGroup(adminLayout.createSequentialGroup()
                        .addComponent(customerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminLayout.createSequentialGroup()
                    .addContainerGap(464, Short.MAX_VALUE)
                    .addComponent(adminMain, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        adminLayout.setVerticalGroup(
            adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminLayout.createSequentialGroup()
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminLayout.createSequentialGroup()
                    .addGap(0, 212, Short.MAX_VALUE)
                    .addComponent(adminMain, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        mainPanel.add(admin, "card3");

        homePanel.setBackground(new java.awt.Color(204, 204, 204));

        btn_customer.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_customer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/customer.png"))); // NOI18N
        btn_customer.setText("Customer");
        btn_customer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_customerActionPerformed(evt);
            }
        });

        btn_admin.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_admin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/admin.png"))); // NOI18N
        btn_admin.setText("Admin");
        btn_admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_adminActionPerformed(evt);
            }
        });

        txt_time.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txt_time.setText("Time:");

        txt_date.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txt_date.setText("Date:");

        date.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        time.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        txt_motto.setFont(new java.awt.Font("Sitka Display", 3, 24)); // NOI18N
        txt_motto.setText("Don't Just Dream of a Vacation. Just Do It!");

        label_namaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/namaste1.png"))); // NOI18N

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(375, 375, 375)
                        .addComponent(btn_admin, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(btn_customer))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addGap(418, 418, 418)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_date, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_time, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                .addGap(0, 328, Short.MAX_VALUE)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                        .addComponent(label_namaste)
                        .addGap(405, 405, 405))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                        .addComponent(txt_motto)
                        .addGap(315, 315, 315))))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_date, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_time, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(label_namaste)
                .addGap(35, 35, 35)
                .addComponent(txt_motto, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_admin, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_customer, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        mainPanel.add(homePanel, "card2");

        btn_back.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/back.png"))); // NOI18N
        btn_back.setBorderPainted(false);
        btn_back.setContentAreaFilled(false);
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        label_title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        label_title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/hotel_2.png"))); // NOI18N
        label_title.setText("    Hotel Information System");
        label_title.setToolTipText("");

        menu_file.setText("File");

        menuItem_import.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_import.setText("Import");
        menuItem_import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_importActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_import);

        menuItem_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItem_exit.setText("Exit");
        menuItem_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_exitActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_exit);

        jMenuBar.add(menu_file);

        menuItem_help.setText("Help");

        menu_userManual.setText("User Manual");
        menu_userManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_userManualActionPerformed(evt);
            }
        });
        menuItem_help.add(menu_userManual);

        jMenuBar.add(menuItem_help);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_back)
                        .addGap(277, 277, 277)
                        .addComponent(label_title)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Goes to Admin panel
    private void btn_adminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_adminActionPerformed
        homePanel.setVisible(false);
        adminPanel.setVisible(false);
        admin.setVisible(true);
        adminMain.setVisible(true);
        loginPanel.setVisible(true);
        btn_back.setVisible(true);
    }//GEN-LAST:event_btn_adminActionPerformed

    // Goes to Customer panel
    private void btn_customerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_customerActionPerformed
        // TODO add your handling code here:
        homePanel.setVisible(false);
        adminMain.setVisible(true);
        admin.setVisible(true);
        adminPanel.setVisible(false);
        btn_back.setVisible(true);
        loginPanel.setVisible(false);
        customerMottoPanel.setVisible(true);
        JOptionPane.showMessageDialog(null, "Please import the csv file to view the hotel information.", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btn_customerActionPerformed

    // Exits the program
    private void menuItem_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_exitActionPerformed
        // TODO add your handling code here:

        if (isSaved == false) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Data has not been saved. Are you sure you want to exit?", "Confirm?", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                System.exit(0);
            } else {

            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_menuItem_exitActionPerformed

    // Imports data from CSV file
    private void menuItem_importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_importActionPerformed
        // TODO add your handling code here:
        if (!isFileImported) {
            String line;
            String fileLocation = getFileLocation();
            System.out.println(fileLocation);

            DefaultTableModel model = (DefaultTableModel) adminTable.getModel();
            model.setRowCount(0);
            try {
                BufferedReader br = new BufferedReader(new FileReader(fileLocation));
                while ((line = br.readLine()) != null) {
                    System.out.println(line);
                    String[] data = line.split(",");
                    SearchArray.add(data);
                    isFileImported = true;

                    addData(data);
                }
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "File not Found", "Alert", JOptionPane.ERROR_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e + "", "Alert", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "The CSV File has already been imported.", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_menuItem_importActionPerformed

    // Goes back to landing panel
    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        // TODO add your handling code here:
        homePanel.setVisible(true);
        admin.setVisible(false);
        btn_back.setVisible(false);
    }//GEN-LAST:event_btn_backActionPerformed

    private void txt_contactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_contactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_contactActionPerformed

    private void radio_unavailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_unavailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radio_unavailableActionPerformed

    // Adds data to the table 
    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        // TODO add your handling code here:
        try {
            radio_available.setActionCommand("Available");
            radio_unavailable.setActionCommand("Unavailable");

            String hotel = txt_hotelName.getText();
            String address = txt_address.getText();
            String price = txt_price.getText();
            String rating = combo_addRating.getSelectedItem().toString();
            String contact = txt_contact.getText();
            String pickDrop = group_pickDrop.getSelection().getActionCommand();

            String firstLet = hotel.substring(0, 1);
            // Get remaining letter using substring
            String remLet = hotel.substring(1);

            // convert the first letter of String to uppercase
            firstLet = firstLet.toUpperCase();
            String hotelName = firstLet + remLet;

            // TO check empty fields
            if (hotelName.equals("") || address.equals("") || price.equals("") || rating.equals("-Select a Rating-") || contact.equals("")
                    || pickDrop.equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill all the required input fields.");
            } else {
                Object[] data = {hotelName, address, rating, price, contact, pickDrop};
                addData(data);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Please fill all the required input fields.");
        }
    }//GEN-LAST:event_btn_addActionPerformed

    // Table data validation
    public void addData(Object[] data) {
        String check_name;
        String check_contact;
        boolean exists = false;
        for (int i = 0; i < adminTable.getRowCount(); i++) {
            check_name = adminTable.getValueAt(i, 0).toString().trim();
            check_contact = adminTable.getValueAt(i, 4).toString().trim();
            if (txt_hotelName.getText().equals(check_name)) {
                exists = true;
                JOptionPane.showMessageDialog(null, "This hotel name already exists.");
                break;
            }
            if (txt_contact.getText().equals(check_contact)) {
                exists = true;
                JOptionPane.showMessageDialog(null, "The hotel contact already exists.");
                break;
            }
        }
        if (!exists) {
            DefaultTableModel model = (DefaultTableModel) adminTable.getModel();
            model.addRow(data);
            clear();
            isSaved = false;
        }
    }

    // Deletes selected row
    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        if (adminTable.getSelectedRow() != -1) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove this hotel information?", "Confirm?", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                int del = adminTable.getSelectedRow();
                ((DefaultTableModel) adminTable.getModel()).removeRow(del);
                JOptionPane.showMessageDialog(null, "Selected row deleted successfully");
                isSaved = false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kindly select a row to be deleted.");
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    // Gets data of selected row from table
    private void adminTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminTableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            int i = adminTable.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) adminTable.getModel();
            txt_hotelName.setText(model.getValueAt(i, 0).toString());
            txt_address.setText(model.getValueAt(i, 1).toString());
            String Rating = model.getValueAt(i, 2).toString();
            switch (Rating) {
                case "Unrated":
                    combo_addRating.setSelectedIndex(1);
                    break;
                case "1 Star":
                    combo_addRating.setSelectedIndex(2);
                    break;
                case "2 Star":
                    combo_addRating.setSelectedIndex(3);
                    break;
                case "3 Star":
                    combo_addRating.setSelectedIndex(4);
                    break;
                case "4 Star":
                    combo_addRating.setSelectedIndex(5);
                    break;
                case "5 Star":
                    combo_addRating.setSelectedIndex(6);
                    break;
            }
            txt_price.setText(model.getValueAt(i, 3).toString());
            txt_contact.setText(model.getValueAt(i, 4).toString());
            String pickDrop = model.getValueAt(i, 5).toString();
            if (pickDrop.equals("Available")) {
                radio_available.setSelected(true);
            } else {
                radio_unavailable.setSelected(true);
            }
        }
    }//GEN-LAST:event_adminTableMouseClicked

    // Clears text fields
    public void clear() {
        txt_hotelName.setText("");
        txt_address.setText("");
        txt_price.setText("");
        txt_contact.setText("");
        combo_addRating.setSelectedIndex(0);
        group_pickDrop.clearSelection();
    }

    // Search hotels according to price
    private void btn_searchPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchPriceActionPerformed
        // TODO add your handling code here:
        if (txt_searchPrice.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(null, "Please enter the required price range.");
        } else {
            for (int i = 0; i < SearchArray.size(); i++) {
                int info = Integer.parseInt(SearchArray.get(i)[3]);
                int infoIndex = i;
                for (int j = i + 1; j < SearchArray.size(); j++) {
                    int check = Integer.parseInt(SearchArray.get(j)[3]);
                    if (check < info) {
                        info = check;
                        infoIndex = j;
                    }
                }
                String[] temp = SearchArray.get(i);
                SearchArray.set(i, SearchArray.get(infoIndex));
                SearchArray.set(infoIndex, temp);
            }
            int key = Integer.parseInt(txt_searchPrice.getText());
            int low = 0;
            int high = SearchArray.size() - 1;
            int mid = 0;
            boolean found = false;
            while (low <= high) {
                mid = (high + low) / 2;
                int val = Integer.parseInt(SearchArray.get(mid)[3]);
                if (key == val) {
                    found = true;
                    break;
                } else if (key < val) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
            if (found) {
                JOptionPane.showMessageDialog(null,
                        "Hotel Name -> " + SearchArray.get(mid)[0]
                        + "\n Address -> " + SearchArray.get(mid)[1]
                        + "\n Rating -> " + SearchArray.get(mid)[2]
                        + "\n Price of the Room -> " + SearchArray.get(mid)[3]
                        + "\n Contact Details ->" + SearchArray.get(mid)[4]
                        + "\n Pickup and Drop -> " + SearchArray.get(mid)[5],
                        "Search Result", JOptionPane.INFORMATION_MESSAGE
                );
            } else {
                JOptionPane.showMessageDialog(null, "Sorry! No Hotel with Price range of " + key + ".");
            }
        }
        txt_searchPrice.setText("");
    }//GEN-LAST:event_btn_searchPriceActionPerformed

    // Sorts according to ascending and descending
    private void combo_adminSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_adminSortActionPerformed
        // TODO add your handling code here:
        int selected = combo_adminSort.getSelectedIndex();
        if (selected == 0) {
            JOptionPane.showMessageDialog(null, "Kindly select the suitable option.");
        } else if (selected == 1) {
            DefaultTableModel model = (DefaultTableModel) adminTable.getModel();
            sort(0, 0);
        } else if (selected == 2) {
            DefaultTableModel model = (DefaultTableModel) adminTable.getModel();
            sort(1, 0);
        }
    }

    // Sorting algorithm
    public void sort(int order, int column) {
        // count the total number of rows with value
        int count = adminTable.getRowCount();

        // Creating a new array with size count
        Object[] a = new Object[count];
        // Storing the table moduleCode value in array a
        // by traversing through table data
        int rowCount = adminTable.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String mcode = (String) adminTable.getValueAt(i, column);
            if (mcode != null) {
                a[i] = mcode;
            }
        }
        for (int i = 0; i < a.length; i++) {
            int min = i;
            for (int j = i + 1; j < a.length; j++) {
                // for the string data we need to use: a[k].compareTo( a[min] ) > 0
                if (order == 0) {
                    if (a[j].toString().compareTo(a[min].toString()) < 0) {
                        min = j;
                    }
                } else {
                    if (a[j].toString().compareTo(a[min].toString()) > 0) {
                        min = j;
                    }
                }
            }
            // swapping array values
            Object temp = a[min];
            a[min] = a[i];
            a[i] = temp;

            // swapping hotelName values
            String hotelNametemp = (String) adminTable.getValueAt(i, 0);
            adminTable.setValueAt(adminTable.getValueAt(min, 0), i, 0);
            adminTable.setValueAt(hotelNametemp, min, 0);

            // swapping Address Values 
            String addressTemp = (String) adminTable.getValueAt(i, 1);
            adminTable.setValueAt(adminTable.getValueAt(min, 1), i, 1);
            adminTable.setValueAt(addressTemp, min, 1);

            // swapping rating values
            String ratingTemp = (String) adminTable.getValueAt(i, 2);
            adminTable.setValueAt(adminTable.getValueAt(min, 2), i, 2);
            adminTable.setValueAt(ratingTemp, min, 2);

            // swapping price values
            String priceTemp = (String) adminTable.getValueAt(i, 3);
            adminTable.setValueAt(adminTable.getValueAt(min, 3), i, 3);
            adminTable.setValueAt(priceTemp, min, 3);

            // swapping contact values
            String contactTemp = (String) adminTable.getValueAt(i, 4);
            adminTable.setValueAt(adminTable.getValueAt(min, 4), i, 4);
            adminTable.setValueAt(contactTemp, min, 4);

            // swapping pickupdrop values
            String pickupdropTemp = (String) adminTable.getValueAt(i, 5);
            adminTable.setValueAt(adminTable.getValueAt(min, 5), i, 5);
            adminTable.setValueAt(pickupdropTemp, min, 5);
        }
    }//GEN-LAST:event_combo_adminSortActionPerformed

    // Save table data to CSV file
    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        // TODO add your handling code here:
        try {
            FileWriter tableWriter = new FileWriter("src/Records.csv", false);
            int rows = adminTable.getRowCount();
            for (int i = 0; i < rows; i++) {
                if (adminTable.getValueAt(i, 0).toString().trim() != "") {
                    tableWriter.append(adminTable.getValueAt(i, 0).toString() + ",");
                    tableWriter.append(adminTable.getValueAt(i, 1).toString() + ",");
                    tableWriter.append(adminTable.getValueAt(i, 2).toString() + ",");
                    tableWriter.append(adminTable.getValueAt(i, 3).toString() + ",");
                    tableWriter.append(adminTable.getValueAt(i, 4).toString() + ",");
                    tableWriter.append(adminTable.getValueAt(i, 5).toString());
                    tableWriter.append("\n");
                    tableWriter.flush();
                }
            }
            JOptionPane.showMessageDialog(null, "The records have been saved", "Success", JOptionPane.INFORMATION_MESSAGE);
            isFileImported = false;
            isSaved = true;

        } catch (IOException | NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Unable To save.");
        }
    }//GEN-LAST:event_btn_saveActionPerformed

    // Restricts String input
    private void txt_priceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_priceKeyPressed
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (Character.isDigit(key) || evt.getKeyCode() == 8) {
            txt_price.setEditable(true);
        } else {
            txt_price.setEditable(false);
        }
    }//GEN-LAST:event_txt_priceKeyPressed

    // Restricts String input
    private void txt_contactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_contactKeyPressed
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (Character.isDigit(key) || evt.getKeyCode() == 8) {
            txt_contact.setEditable(true);
        } else {
            txt_contact.setEditable(false);
        }

    }//GEN-LAST:event_txt_contactKeyPressed

    // Restricts String input
    private void txt_searchPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchPriceKeyPressed
        // TODO add your handling code here:
        char key = evt.getKeyChar();
        if (Character.isDigit(key) || evt.getKeyCode() == 8) {
            txt_searchPrice.setEditable(true);
        } else {
            txt_searchPrice.setEditable(false);
        }
    }//GEN-LAST:event_txt_searchPriceKeyPressed

    // Login to admin panel
    private void btn_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loginActionPerformed
        // TODO add your handling code here:
        String username = txt_username.getText();
        String password = txt_password.getText();

        if (username.equals("admin") && password.equals("admin")) {
            loginPanel.setVisible(false);
            adminPanel.setVisible(true);
            JOptionPane.showMessageDialog(null, "Please import the csv file to view the hotel information and avoid duplicate entries.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect Username or Password.");
        }
        txt_username.setText("");
        txt_password.setText("");
    }//GEN-LAST:event_btn_loginActionPerformed

    // Displays user manual
    private void menu_userManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_userManualActionPerformed
        // TODO add your handling code here:
        File manual = new File("src/UserManual.pdf");
        try {
            Desktop.getDesktop().open(manual);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Sorry. The user manual could not be located.");
        }
    }//GEN-LAST:event_menu_userManualActionPerformed

    // Search according to rating
    private void btn_searchRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchRatingActionPerformed
        // TODO add your handling code here:
        if (combo_Rating.getSelectedIndex() > 0) {
            String selectedRating = combo_Rating.getSelectedItem().toString();
            int rowCount = adminTable.getRowCount();
            int colCount = adminTable.getColumnCount();
            ArrayList<ArrayList<String>> List = new ArrayList<>();
            if (rowCount != 0) {
                for (int j = 0; j < rowCount; j++) {
                    ArrayList<String> SearchArray = new ArrayList<>();
                    for (int i = 0; i < colCount; i++) {
                        String rating = (String) adminTable.getValueAt(j, i);
                        SearchArray.add(rating);
                    }
                    List.add(SearchArray);
                }
            }
            String selectedHotels = "";
            int count = 0;
            int arrayLen = List.size();
            for (int i = 0; i < arrayLen; i++) {
                var newArray = List.get(i);
                if (newArray.get(2).equals(selectedRating)) {
                    if (count == 0) {
                        count++;
                        selectedHotels = count + ". " + newArray.get(0);

                    } else {
                        count++;
                        selectedHotels = selectedHotels + "\n" + count + ") " + newArray.get(0);
                    }

                }
            }
            if (count == 0) {
                JOptionPane.showMessageDialog(null, "No hotels found in " + selectedRating + " category.", "Selected Hotels",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                String Messageoutput = "There are " + count + " hotels in " + selectedRating + " rating category. They are: " + "\n" + selectedHotels;
                JOptionPane.showMessageDialog(null, Messageoutput, "Selected Hotels",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a hotel rating to Be Searched.", "Message",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_searchRatingActionPerformed

    // Updates data of selected row
    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:
        String check_name;
        String check_contact;
        boolean exists = false;
        for (int i = 0; i < adminTable.getRowCount(); i++) {

            check_name = adminTable.getValueAt(i, 0).toString().trim();
            check_contact = adminTable.getValueAt(i, 4).toString().trim();
            if (i != adminTable.getSelectedRow()) {
                if (txt_hotelName.getText().equals(check_name)) {
                    exists = true;
                    JOptionPane.showMessageDialog(null, "This hotel name already exists.");
                    break;
                }
                if (txt_contact.getText().equals(check_contact)) {
                    exists = true;
                    JOptionPane.showMessageDialog(null, "The hotel contact already exists.");
                    break;
                }
            }
        }
        if (!exists) {
            try {
                radio_available.setActionCommand("Available");
                radio_unavailable.setActionCommand("Unavailable");
                String hotelName = txt_hotelName.getText();
                String address = txt_address.getText();
                String price = txt_price.getText();
                String rating = combo_addRating.getSelectedItem().toString();
                String contact = txt_contact.getText();
                String pickDrop = group_pickDrop.getSelection().getActionCommand();

                // TO check empty fields
                if (hotelName.equals("") || address.equals("") || price.equals("") || rating.equals("-Select a Rating-") || contact.equals("")
                        || pickDrop.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please fill all the required input fields.");
                } else {
                    int i = adminTable.getSelectedRow();
                    DefaultTableModel model = (DefaultTableModel) adminTable.getModel();
                    if (i >= 0) {
                        model.setValueAt(hotelName, i, 0);
                        model.setValueAt(address, i, 1);
                        model.setValueAt(rating, i, 2);
                        model.setValueAt(price, i, 3);
                        model.setValueAt(contact, i, 4);
                        model.setValueAt(pickDrop, i, 5);
                        JOptionPane.showMessageDialog(null, "Hotel Information Updated.");
                        clear();

                    } else {
                        JOptionPane.showMessageDialog(null, "Error");
                    }
                }
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(null, "Please select a row to update.");
            }
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    // Gets location of SRC file
    private static String getFileLocation() {
        String fileLocation = System.getProperty("user.dir") + ("\\src\\Records.csv");
        return fileLocation;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(coursework.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(coursework.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(coursework.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(coursework.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new coursework().setVisible(true);
            }
        });
    }
    private static boolean isFileImported = false;
    private static boolean isSaved = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel admin;
    private javax.swing.JPanel adminMain;
    private javax.swing.JPanel adminPanel;
    private javax.swing.JTable adminTable;
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_admin;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_customer;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_login;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_searchPrice;
    private javax.swing.JButton btn_searchRating;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> combo_Rating;
    private javax.swing.JComboBox<String> combo_addRating;
    private javax.swing.JComboBox<String> combo_adminSort;
    private javax.swing.JPanel customerMottoPanel;
    private javax.swing.JPanel customerPanel;
    private javax.swing.JLabel date;
    private javax.swing.ButtonGroup group_pickDrop;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JLabel label_addHotel;
    private javax.swing.JLabel label_address;
    private javax.swing.JLabel label_contact;
    private javax.swing.JLabel label_hotelName;
    private javax.swing.JLabel label_login;
    private javax.swing.JLabel label_namaste;
    private javax.swing.JLabel label_pickDrop;
    private javax.swing.JLabel label_price;
    private javax.swing.JLabel label_rating;
    private javax.swing.JLabel label_searchPrice;
    private javax.swing.JLabel label_searchRating;
    private javax.swing.JLabel label_sort;
    private javax.swing.JLabel label_title;
    private javax.swing.JLabel lable_search;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem menuItem_exit;
    private javax.swing.JMenu menuItem_help;
    private javax.swing.JMenuItem menuItem_import;
    private javax.swing.JMenu menu_file;
    private javax.swing.JMenuItem menu_userManual;
    private javax.swing.JRadioButton radio_available;
    private javax.swing.JRadioButton radio_unavailable;
    private javax.swing.JScrollPane tablePanel;
    private javax.swing.JLabel time;
    private javax.swing.JTextField txt_address;
    private javax.swing.JTextField txt_contact;
    private javax.swing.JLabel txt_date;
    private javax.swing.JTextField txt_hotelName;
    private javax.swing.JLabel txt_motto;
    private javax.swing.JTextField txt_password;
    private javax.swing.JTextField txt_price;
    private javax.swing.JTextField txt_searchPrice;
    private javax.swing.JLabel txt_time;
    private javax.swing.JTextField txt_username;
    // End of variables declaration//GEN-END:variables
}
